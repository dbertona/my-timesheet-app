{
  "createdAt": "2025-09-28T09:43:13.949Z",
  "updatedAt": "2025-09-29T06:50:00.000Z",
  "id": "sync_recursos_y_ps_years_integrated",
  "name": "sync_recursos_y_ps_years_bc_to_psanalytics",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sync-recursos-y-ps-years-psanalytics",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-start",
      "name": "Webhook Start",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        464,
        512
      ],
      "webhookId": "sync-recursos-y-ps-years-webhook"
    },
    {
      "parameters": {
        "jsCode": "const row = $json || {};\nconst resolved = $items('Resolve Company')[0]?.json ?? {};\n\nconst companyName = String(row.company_name ?? resolved.companyName ?? '').trim();\nconst companyId   = String(resolved.companyId ?? row.company_id ?? '').trim();\nconst lastSync    = new Date(String(row.last_sync_at ?? '1970-01-01T00:00:00Z').replace(' ', 'T')).toISOString();\n\nreturn [{ json: { companyName, companyId, lastSync } }];"
      },
      "id": "build-last-sync-recursos",
      "name": "Build Last Sync (Recursos)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1136,
        320
      ]
    },
    {
      "parameters": {
        "jsCode": "const row = $json || {};\nconst resolved = $items('Resolve Company')[0]?.json ?? {};\n\nconst companyName = String(row.company_name ?? resolved.companyName ?? '').trim();\nconst companyId   = String(resolved.companyId ?? row.company_id ?? '').trim();\nconst lastSync    = new Date(String(row.last_sync_at ?? '1970-01-01T00:00:00Z').replace(' ', 'T')).toISOString();\n\nreturn [{ json: { companyName, companyId, lastSync } }];"
      },
      "id": "build-last-sync-years",
      "name": "Build Last Sync (PS_Years)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1136,
        512
      ]
    },
    {
      "parameters": {
        "url": "={{ 'https://api.businesscentral.dynamics.com/v2.0/a18dc497-a8b8-4740-b723-65362ab7a3fb/Pruebas_PS/api/Power_Solution/PS_API/v2.0/companies(' + $json.companyId + ')/Recursos' }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "$select",
              "value": "no,name,arbvrneMail,globalDimension1Code,calendario,fechaDeBaja,fechaDeAlta,subcontratacion,perfil,lastModifiedDateTime"
            },
            {
              "name": "$filter",
              "value": "={{ 'lastModifiedDateTime ge ' + $json.lastSync }}"
            }
          ]
        },
        "options": {}
      },
      "id": "bc-api-recursos",
      "name": "BC API - Recursos",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1360,
        320
      ],
      "credentials": {
        "oAuth2Api": {
          "id": "5caHilW1m87Snw87",
          "name": "Business Central"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ 'https://api.businesscentral.dynamics.com/v2.0/a18dc497-a8b8-4740-b723-65362ab7a3fb/Pruebas_PS/api/Power_Solution/PS_API/v2.0/companies(' + $json.companyId + ')/PS_Years' }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "$select",
              "value": "PS_Year"
            },
            {
              "name": "$filter",
              "value": "={{ 'lastModifiedDateTime ge ' + $json.lastSync }}"
            }
          ]
        },
        "options": {}
      },
      "id": "bc-api-years",
      "name": "BC API - PS_Years",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1360,
        512
      ],
      "credentials": {
        "oAuth2Api": {
          "id": "5caHilW1m87Snw87",
          "name": "Business Central"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.recursos\n(company_name, \"no\", name, arbvrn_email, global_dimension1_code, calendario,\n fecha_de_baja, fecha_de_alta, subcontratacion, perfil,\n last_modified_datetime, updated_at)\nSELECT\n  $1,                 -- company_name\n  $2,                 -- no\n  $3,                 -- name\n  NULLIF(btrim($4),''),  -- arbvrn_email, vacío → NULL\n  $5,                 -- global_dimension1_code\n  $6,                 -- calendario\n  NULLIF(NULLIF($7::text,''),'0001-01-01')::date,  -- fecha_de_baja\n  NULLIF(NULLIF($8::text,''),'0001-01-01')::date,  -- fecha_de_alta\n  CASE WHEN $9::text IN ('true','1','t','yes') THEN true ELSE false END, -- subcontratacion\n  $10,                -- perfil\n  NULLIF($11::text,'')::timestamptz,               -- last_modified_datetime\n  NOW()               -- updated_at\nWHERE $2::text <> ''      -- no obligatorio\nON CONFLICT (\"no\")\nDO UPDATE SET\n  company_name           = EXCLUDED.company_name,\n  name                   = EXCLUDED.name,\n  arbvrn_email           = EXCLUDED.arbvrn_email,\n  global_dimension1_code = EXCLUDED.global_dimension1_code,\n  calendario             = EXCLUDED.calendario,\n  fecha_de_baja          = EXCLUDED.fecha_de_baja,\n  fecha_de_alta          = EXCLUDED.fecha_de_alta,\n  subcontratacion        = EXCLUDED.subcontratacion,\n  perfil                 = EXCLUDED.perfil,\n  last_modified_datetime = EXCLUDED.last_modified_datetime,\n  updated_at             = NOW()\nRETURNING *;",
        "options": {
          "queryReplacement": "{{$json.companyName}}\n{{$json.no}}\n{{$json.name}}\n{{$json.arbvrneMail}}\n{{$json.globalDimension1Code}}\n{{$json.calendario}}\n{{$json.fechaDeBaja}}\n{{$json.fechaDeAlta}}\n{{ $json.subcontratacion ? 'true' : 'false' }}\n{{$json.perfil}}\n{{$json.lastModifiedDateTime}}"
        }
      },
      "id": "upsert-recursos",
      "name": "Upsert Recursos",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1808,
        320
      ],
      "credentials": {
        "postgres": {
          "id": "6I06GLCMi5toLQFI",
          "name": "Postgres PS_Analytics"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.ps_year\n(company_name, ps_year, updated_at)\nSELECT\n  $1,                 -- company_name\n  $2::integer,        -- ps_year\n  NOW()               -- updated_at\nWHERE $2::text <> '' AND $2::text != '0'      -- ps_year obligatorio y válido\nON CONFLICT (company_name, ps_year)\nDO UPDATE SET\n  updated_at = NOW()\nRETURNING *;",
        "options": {
          "queryReplacement": "{{$json.companyName}}\n{{$json.PS_Year}}"
        }
      },
      "id": "upsert-ps-year",
      "name": "Upsert PS_Year",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1808,
        512
      ],
      "credentials": {
        "postgres": {
          "id": "6I06GLCMi5toLQFI",
          "name": "Postgres PS_Analytics"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": true, \"message\": \"Recursos y PS_Years sincronizados exitosamente\", \"timestamp\": new Date().toISOString(), \"recursos_processed\": $items(\"Transform Recursos\").length, \"ps_years_processed\": $items(\"Transform PS_Years\").length } }}",
        "options": {}
      },
      "id": "response-success",
      "name": "Response Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2480,
        416
      ]
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        240,
        320
      ],
      "id": "manual-trigger",
      "name": "When clicking 'Execute workflow'"
    },
    {
      "parameters": {
        "jsCode": "// Normaliza entrada y mapea a public.recursos\nconst input = $input.all();\nif (input.length === 0) return [];\n\nconst src = input[0]?.json ?? {};\nconst registros = Array.isArray(src.value) ? src.value : (Array.isArray(src) ? src : [src]);\nconst items = [];\n\n// helpers\nconst cleanDate = (v) => {\n  const s = String(v ?? '').trim();\n  if (!s || s === '0001-01-01') return '';\n  return s;\n};\nconst toBool = (v) => {\n  const s = String(v).toLowerCase();\n  return s === 'true' || s === '1' || s === 't' || s === 'yes';\n};\n\nconst companyName = $items('Build Last Sync (Recursos)')[0]?.json?.companyName || '';\n\nfor (const r of registros) {\n  const no = String(r.no ?? r.code ?? '').trim();\n  if (!no) continue;\n\n  const name = String(r.name ?? '').trim();\n  const email = String(r.email ?? r.arbvrneMail ?? '').trim();\n  const globalDimension1Code = String(\n    r.globalDimension1Code ?? r.global_dimension1_code ?? r.department ?? ''\n  ).trim();\n  const calendario = String(\n    r.calendario ?? r.Calendario ?? r.calendar_type ?? r.calendarType ?? r.calendar ?? ''\n  ).trim();\n  const fechaDeBaja = cleanDate(r.fechaDeBaja ?? r.fecha_de_baja);\n  const fechaDeAlta = cleanDate(r.fechaDeAlta ?? r.fecha_de_alta);\n  const subcontratacion = (typeof r.subcontratacion === 'boolean') ? r.subcontratacion : toBool(r.subcontratacion);\n  const perfil = String(r.perfil ?? '').trim();\n  const lastModifiedDateTime = String(r.lastModifiedDateTime ?? r.last_modified_datetime ?? '').trim();\n\n  items.push({\n    json: {\n      companyName,\n      no,\n      name,\n      arbvrneMail: email,\n      globalDimension1Code,\n      calendario,\n      fechaDeBaja,\n      fechaDeAlta,\n      subcontratacion,\n      perfil,\n      lastModifiedDateTime,\n    },\n  });\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1584,
        320
      ],
      "id": "transform-recursos",
      "name": "Transform Recursos"
    },
    {
      "parameters": {
        "jsCode": "// Normaliza entrada y mapea a public.ps_year\nconst input = $input.all();\nif (input.length === 0) return [];\n\nconst src = input[0]?.json ?? {};\nconst registros = Array.isArray(src.value) ? src.value : (Array.isArray(src) ? src : [src]);\nconst items = [];\n\n// Obtener companyName del contexto actual (de BC API)\nconst companyName = $items('Build Last Sync (PS_Years)')[0]?.json?.companyName || '';\n\nfor (const r of registros) {\n  const psYear = String(r.PS_Year ?? r.ps_year ?? '').trim();\n  if (!psYear || psYear === '0') continue;\n\n  items.push({\n    json: {\n      companyName,\n      PS_Year: parseInt(psYear) || 0,\n    },\n  });\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1584,
        512
      ],
      "id": "transform-ps-years",
      "name": "Transform PS_Years"
    },
    {
      "parameters": {
        "jsCode": "const companyName = $items('Build Last Sync (Recursos)')[0]?.json?.companyName || '';\nreturn [{ json: { companyName, nowIso: new Date().toISOString() } }];"
      },
      "id": "compute-now-iso-recursos",
      "name": "Compute now ISO (Recursos)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2032,
        320
      ]
    },
    {
      "parameters": {
        "jsCode": "const companyName = $items('Build Last Sync (PS_Years)')[0]?.json?.companyName || '';\nreturn [{ json: { companyName, nowIso: new Date().toISOString() } }];"
      },
      "id": "compute-now-iso-years",
      "name": "Compute now ISO (PS_Years)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2032,
        512
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "sync_state",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "company_name",
              "condition": "eq",
              "keyValue": "={{ $('Resolve Company').first().json.companyName }}"
            },
            {
              "keyName": "entity",
              "condition": "eq",
              "keyValue": "recursos"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "last_sync_at",
              "fieldValue": "={{ $json.nowIso }}"
            }
          ]
        }
      },
      "id": "update-sync-state-recursos",
      "name": "Update sync_state (Recursos)",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2256,
        320
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pCM59OXAIeZSuk0Q",
          "name": "Supabase PS-Analytics"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "sync_state",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "company_name",
              "condition": "eq",
              "keyValue": "={{ $('Resolve Company').first().json.companyName }}"
            },
            {
              "keyName": "entity",
              "condition": "eq",
              "keyValue": "ps_year"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "last_sync_at",
              "fieldValue": "={{ $json.nowIso }}"
            }
          ]
        }
      },
      "id": "update-sync-state-years",
      "name": "Update sync_state (PS_Years)",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2256,
        512
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pCM59OXAIeZSuk0Q",
          "name": "Supabase PS-Analytics"
        }
      }
    },
    {
      "parameters": {
        "useCustomSchema": true,
        "operation": "getAll",
        "tableId": "=sync_state",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "company_name",
              "condition": "eq",
              "keyValue": "={{ $('Resolve Company').first().json.companyName }}"
            }
          ]
        }
      },
      "id": "get-sync-state-all",
      "name": "Get sync_state ALL",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        912,
        416
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pCM59OXAIeZSuk0Q",
          "name": "Supabase PS-Analytics"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const p = $json.params || {};\nconst slugRaw = (p.company || $json.query?.company || '').toString().trim().toLowerCase();\nconst slug = encodeURI(slugRaw);\nconst map = {\n  'psi': { companyName: 'Power Solution Iberia SL', companyId: 'ca9dc1bf-54ee-ed11-884a-000d3a455d5b' },\n  'pslab': { companyName: 'PS LAB CONSULTING SL', companyId: '656f8f0e-2bf4-ed11-8848-000d3a4baf18' }\n};\nconst chosen = map[slug];\nif (!chosen) {\n  return [{ json: { error: 'Invalid company', slug } }];\n}\nreturn [{ json: { companyName: chosen.companyName, companyId: chosen.companyId, slug } }];"
      },
      "id": "resolve-company",
      "name": "Resolve Company",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        688,
        416
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "company-param-integrated",
              "name": "query.company",
              "value": "psi",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        464,
        320
      ],
      "id": "set-company",
      "name": "Set Company"
    }
  ],
  "connections": {
    "Webhook Start": {
      "main": [
        [
          {
            "node": "Resolve Company",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BC API - Recursos": {
      "main": [
        [
          {
            "node": "Transform Recursos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BC API - PS_Years": {
      "main": [
        [
          {
            "node": "Transform PS_Years",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert Recursos": {
      "main": [
        [
          {
            "node": "Compute now ISO (Recursos)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert PS_Year": {
      "main": [
        [
          {
            "node": "Compute now ISO (PS_Years)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking 'Execute workflow'": {
      "main": [
        [
          {
            "node": "Set Company",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Recursos": {
      "main": [
        [
          {
            "node": "Upsert Recursos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform PS_Years": {
      "main": [
        [
          {
            "node": "Upsert PS_Year",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Last Sync (Recursos)": {
      "main": [
        [
          {
            "node": "BC API - Recursos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Last Sync (PS_Years)": {
      "main": [
        [
          {
            "node": "BC API - PS_Years",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compute now ISO (Recursos)": {
      "main": [
        [
          {
            "node": "Update sync_state (Recursos)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compute now ISO (PS_Years)": {
      "main": [
        [
          {
            "node": "Update sync_state (PS_Years)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update sync_state (Recursos)": {
      "main": [
        [
          {
            "node": "Response Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update sync_state (PS_Years)": {
      "main": [
        [
          {
            "node": "Response Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get sync_state ALL": {
      "main": [
        [
          {
            "node": "Build Last Sync (Recursos)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Build Last Sync (PS_Years)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resolve Company": {
      "main": [
        [
          {
            "node": "Get sync_state ALL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Company": {
      "main": [
        [
          {
            "node": "Resolve Company",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "integrated-recursos-ps-years-v1",
  "triggerCount": 0,
  "shared": [],
  "tags": []
}

